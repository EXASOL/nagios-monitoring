#!/usr/bin/python
import xmlrpclib, ssl, json, re, readline
from os         import sep
from sys        import exit, argv, version_info, stdout, stderr
from getpass    import getpass
from urllib     import quote_plus
from xmlrpclib  import ServerProxy
from subprocess import Popen, PIPE, STDOUT

numberPattern =         re.compile(r'^\d+$')
ipStringPattern =       re.compile(r'^[0-9,.]+$')
ip4RangePattern =       re.compile(r'^(\d+\.\d+\.\d+)\.(\d+)\.\.(\d+)')
ipPattern =             re.compile(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')
clusterNamePattern =    re.compile(r'^[A-Za-z0-9_]+$')
userPattern =           re.compile(r'^[A-Za-z0-9_\-]+$')
passwordPattern =       re.compile(r'([^"\']|\S)+')
snmpVersionPattern =    re.compile(r'^(2|3)$')

def validatedInput(pattern, text, isPassword = False):
    value = None
    if isPassword:
        value = getpass(text).strip() 
    else:
        value = raw_input(text).strip()
    if pattern.match(value):
        return value
    else:
        return validatedInput(pattern, text, isPassword)

def XmlRpcCall(userName, password, hostName, urlPath = ''):
    url = 'https://%s:%s@%s/cluster1%s' % (quote_plus(userName), quote_plus(password), hostName, urlPath)
    if hasattr(ssl, 'SSLContext'):
        sslcontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
        sslcontext.verify_mode = ssl.CERT_NONE
        sslcontext.check_hostname = False
        return ServerProxy(url, context=sslcontext)
    return ServerProxy(url)

def ConvertIpString(ipString, licenseServerIp):
    ipString = re.sub('[^0-9,.]+', '', ipString)
    ipItems = []
    for ipRange in ipString.split(','):
        if not '..' in ipRange: #not a range, just an single IP
            if ipRange != licenseServerIp:
                ipItems.append(ipRange)
        else:
            match = ip4RangePattern.match(ipRange)
            for i in range(int(match.group(2)), int(match.group(3)) + 1):
                if i != licenseServerIp:
                    ipItems.append('%s.%i' % (match.group(1), i))
    ipItems.sort()
    return ipItems

licenseServerIp = exaOperationUser = exaOperationPasswd = ''
cluster = None
clusterNodes = 0
abortWizard = False
clusterNodeIps = []
configurationString = ''
logServiceId = 0
databaseDict = {}

while clusterNodes == 0 and not abortWizard:
    try:
        clusterName     =       validatedInput(clusterNamePattern, 'Cluster name [A-Za-z0-9_]: ')
        licenseServerIp =       validatedInput(ipPattern, 'License server IP address: ')
        exaOperationUser =      validatedInput(userPattern, 'EXAoperation user (must have at least the supervisor role): ')
        exaOperationPasswd =    validatedInput(passwordPattern, 'EXAoperation password: ', True)
        logServiceId =          int(validatedInput(numberPattern, 'Logservice number: '))
        clusterNodeIps =        ConvertIpString(validatedInput(ipStringPattern, 'IP addresses of all cluster nodes (connection range): '), licenseServerIp)

        cluster = XmlRpcCall(exaOperationUser, exaOperationPasswd, licenseServerIp, '/')
        logService = XmlRpcCall(exaOperationUser, exaOperationPasswd, licenseServerIp, '/logservice%i' % logServiceId)
        print('\n*** trying to connect...')
        clusterNodes = len(cluster.getNodeList())
        logService.logEntries()

        for ip in clusterNodeIps:
            proc = Popen(['nc', '-zw3', ip, '443'], stdout=PIPE, stderr=STDOUT)
            if proc.wait() != 0:
                clusterNodes = 0
                raise Exception('%s is not reachable' % ip)
    
    except Exception as e:
        print('*** not able to connect (%s)' % e)
        abortWizard = raw_input('Do you want to try again? (Y/n) ').lower().strip() == 'n'
        print('\n')

if abortWizard:
    exit(1)

for dbName in cluster.getDatabaseList():
    if raw_input('Do you want to monitor the database instance "%s"? (Y/n)' % dbName).lower().strip() != 'n':
        skipInstance = False
        while not skipInstance:
            username = raw_input('Database monitoring user: ')
            password = getpass('Password: ')
            database = XmlRpcCall(exaOperationUser, exaOperationPasswd, licenseServerIp, '/db_' + dbName)
            try:
                database.getDatabaseStatistics(username, password)
                databaseDict[dbName] = { 
                    'password' : password,
                    'username' : username
                }
                skipInstance = True
            except:
                print('\n*** database login failed - Please check your credentials and if DB is up and running')
                skipInstance = raw_input('Do you want to try again? (Y/n) ').lower().strip() == 'n'
                print('\n')


snmpVersion = 0 
snmpCommunityString = None
snmpUser = None
snmpAuthPassword = None
snmpPrivPassword = None
snmpIps = {}

if raw_input('Any 3rd party SNMP plugins installed on your cluster? (N/y)').lower().strip() == 'y':
    snmpVersion = int(validatedInput(snmpVersionPattern, 'Do you want to use SNMPv2 (community based, unsafe) or SNMPv3 (user based, encrypted)? [2/3] '))
    if snmpVersion == 2:
        snmpCommunityString = validatedInput(userPattern, 'Configured community string [A-Za-z0-9_-]: ')
    elif snmpVersion == 3:
        snmpUser = validatedInput(userPattern, 'SNMPv3 user [A-Za-z0-9_-]: ')
        snmpAuthPassword = validatedInput(passwordPattern, 'SNMPv3 auth password: ', True)
        snmpPrivPassword = validatedInput(passwordPattern, 'SNMPv3 priv password: ', True)

    print('\nChecking access and credentials:')
    allIps = [] + (clusterNodeIps)
    allIps.append(licenseServerIp)
    oidNotAvailableText = 'No Such Object available on this agent at this OID'
    for ip in allIps:
        proc = Popen(['nc', '-zw1', '-u', ip, '161'], stdout=PIPE, stderr=STDOUT)
        if proc.wait() == 0: #snmpd is running and reachable
            if snmpVersion == 2:
                proc = Popen(['snmpget', '-v2c', '-c', snmpCommunityString, ip, '1.3.6.1.2.1.1.1.0'], stdout=PIPE, stderr=STDOUT)
                if proc.wait() != 0:
                    print('\t%s - access failed; community string maybe wrong?)' % ip)
                else:
                    dellProc =  Popen(['snmpget', '-v2c', '-c', snmpCommunityString, ip, '1.3.6.1.4.1.674.10892.1.100.13.0'], stdout=PIPE, stderr=STDOUT)
                    hpProc =    Popen(['snmpget', '-v2c', '-c', snmpCommunityString, ip, '1.3.6.1.4.1.232.1.2.1.4.2.1.2.1'], stdout=PIPE, stderr=STDOUT)
                    ftsProc =   Popen(['snmpget', '-v2c', '-c', snmpCommunityString, ip, '1.3.6.1.4.1.231.2.10.2.2.3.19.2.0'], stdout=PIPE, stderr=STDOUT)

                    if dellProc.wait() == 0 and not oidNotAvailableText in dellProc.stdout.read():
                        print('\t%s - DELL OpenManage plugin found' % ip)
                        snmpIps[ip] = {
                                'CommunityString'   : snmpCommunityString,
                                'NagiosService'     : 'dell_check_omsa'
                        }

                    elif hpProc.wait() == 0 and not oidNotAvailableText in hpProc.stdout.read():
                        print('\t%s - HP SPP plugin found' % ip)
                        snmpIps[ip] = {
                                'CommunityString'   : snmpCommunityString,
                                'NagiosService'     : 'check_hp'
                        }

                    elif ftsProc.wait() == 0 and not oidNotAvailableText in ftsProc.stdout.read():
                        print('\t%s - Fujitsu ServerView plugin found' % ip)
                        snmpIps[ip] = {
                                'CommunityString'   : snmpCommunityString,
                                'NagiosService'     : 'fujitsu_check_server'
                        }

                    else:
                        print('\t%s - No known plugin found' % ip)
 
            elif snmpVersion == 3:
                snmpCreds = ['-v3', '-aSHA', '-xAES', '-A', snmpAuthPassword, '-X', snmpPrivPassword, '-l', 'authPriv', '-u', snmpUser]
                proc = Popen(['snmpget'] + snmpCreds +  [ip, '1.3.6.1.2.1.1.1.0'], stdout=PIPE, stderr=STDOUT)
                if proc.wait() != 0:
                    print('\t%s - access failed; SNMPv3 credentials maybe wrong?)' % ip)
                else:
                    dellProc =  Popen(['snmpget'] + snmpCreds + [ip, '1.3.6.1.4.1.674.10892.1.100.13.0'], stdout=PIPE, stderr=STDOUT)
                    hpProc =    Popen(['snmpget'] + snmpCreds + [ip, '1.3.6.1.4.1.232.1.2.1.4.2.1.2.1'], stdout=PIPE, stderr=STDOUT)
                    ftsProc =   Popen(['snmpget'] + snmpCreds + [ip, '1.3.6.1.4.1.231.2.10.2.2.3.19.2.0'], stdout=PIPE, stderr=STDOUT)

                    if dellProc.wait() == 0 and not oidNotAvailableText in dellProc.stdout.read():
                        print('\t%s - DELL OpenManage plugin found' % ip)
                        snmpIps[ip] = {
                                'User'          : snmpUser,
                                'AuthPassword'  : snmpAuthPassword,
                                'PrivPassword'  : snmpPrivPassword,
                                'NagiosService' : 'dell_check_omsa_snmpv3'
                        }

                    elif hpProc.wait() == 0 and not oidNotAvailableText in hpProc.stdout.read():
                        print('\t%s - HP SPP plugin found' % ip)
                        snmpIps[ip] = {
                                'User'          : snmpUser,
                                'AuthPassword'  : snmpAuthPassword,
                                'PrivPassword'  : snmpPrivPassword,
                                'NagiosService' : 'check_hp_snmpv3'
                        }

                    elif ftsProc.wait() == 0 and not oidNotAvailableText in ftsProc.stdout.read():
                        print('\t%s - Fujitsu ServerView plugin found' % ip)
                        snmpIps[ip] = {
                                'User'          : snmpUser,
                                'AuthPassword'  : snmpAuthPassword,
                                'PrivPassword'  : snmpPrivPassword,
                                'NagiosService' : 'fujitsu_check_server_snmpv3'
                        }    
                    else:
                        print('\t%s - No known plugin found' % ip)
        else:
            print('\t%s [snmp not running]' % ip)

checkInterfaces = False
interfaceMatch = ''
configurationString += """### hosts and hostgroups ###
define hostgroup {{
        hostgroup_name              {ClusterName}
        alias                       {ClusterName} Cluster
}}

define host{{
        use                         generic-host
        hostgroups                  {ClusterName}
        name                        {ClusterName}
        _user                       {ExaOpUser}
        _password                   {ExaOpPwd}
        _logserviceId               {LogServiceId}
        register                    0
}}

define host{{
        use                         {ClusterName}
        host_name                   {ClusterName}-license
        alias                       {ClusterName} License
        address                     {LicenseServerAddr}
}}

""".format(**{
    'ClusterName'       : clusterName,
    'ExaOpUser'         : exaOperationUser,
    'ExaOpPwd'          : exaOperationPasswd,
    'LogServiceId'      : logServiceId,
    'LicenseServerAddr' : licenseServerIp
})

if len(snmpIps) > 0 and licenseServerIp in snmpIps.keys():
    snmpIps[licenseServerIp]['NagiosHostname'] = ('%s-license' % clusterName)

nodeIterator = 0
for ip in clusterNodeIps:
    nodeIterator += 1
    if len(snmpIps) and ip in snmpIps.keys():
        snmpIps[ip]['NagiosHostname'] = ('%s-node%i' % (clusterName, nodeIterator))

    configurationString += """define host{{
        use                         {ClusterName}
        host_name                   {ClusterName}-node{i}
        alias                       {ClusterName} Node {i}
        address                     {ip}
}}
""".format(**{
        'ClusterName'       : clusterName,
        'ip'                : ip,
        'i'                 : nodeIterator
    })

configurationString += """### cluster and database services ###
define service{{
        use                     exasol_nodes
        host_name               {ClusterName}-license
}}

define service {{
        use                     exasol_services
        host_name               {ClusterName}-license
}}

define service{{
        use                     exasol_logservice
        host_name               {ClusterName}-license
}}

""".format(**{
    'ClusterName'       : clusterName
})

configurationString +=  """define service{
        use                     exasol_exaoperationhttps
        host_name               """
for i in xrange(1, nodeIterator + 1):
    configurationString += '%s-node%s,' % (clusterName, i)
configurationString += '%s-license\n}\n' % (clusterName)


for dbName in databaseDict.keys():
    username = databaseDict[dbName]['username']
    password = databaseDict[dbName]['password']
    configurationString += """define service{{
        use                     exasol_db_performance
        host_name               {ClusterName}-license
        name                    exasol_db_performance_{Database}
        service_description     DB Performance {Database}
        _database               {Database}
        _dbuser                 {User}
        _dbpassword             {Password}
}}
""".format(**{
    'ClusterName'       : clusterName,
    'Database'          : dbName,
    'User'              : username,
    'Password'          : password
})

for dbName in cluster.getDatabaseList():
    configurationString += """define service{{
        use                     exasol_db_diskspace
        host_name               {ClusterName}-license
        name                    exasol_db_diskspace_{Database}
        service_description     Free DB Space {Database}
        _database               {Database}
}}

define service{{
    use                         exasol_db_backup
    host_name                   {ClusterName}-license
    name                        exasol_db_backup_{Database}
    service_description         Backup Status {Database}
    _database                   {Database}
}}    
""".format(**{
    'ClusterName'       : clusterName,
     'Database'          : dbName,
})

if len(snmpIps) >0:
    for ip in snmpIps:
        if snmpIps[ip].has_key('CommunityString'):
            configurationString += """### SNMP hardware and OS checks ###
define service{{
        use                     {NagiosService}
        host_name               {NagiosHostname}
        _community              {CommunityString}
}}

define service{{
        use                     exasol_check_snmp_mem
        host_name               {NagiosHostname}
        _community              {CommunityString}
}}

define service{{
        use                     exasol_check_snmp_load
        host_name               {NagiosHostname}
        _community              {CommunityString}
}}

define service{{
        use                     exasol_check_snmp_storage
        host_name               {NagiosHostname}
        _community              {CommunityString}
}}

""".format(**snmpIps[ip])
        elif snmpIps[ip].has_key('PrivPassword'):
            configurationString += """### SNMP hardware and OS checks ###
define service{{
        use                     {NagiosService}
        host_name               {NagiosHostname}
        _authpassword           {AuthPassword}
        _privpassword           {PrivPassword}
        _snmpuser               {User}
}}

define service{{
        use                     exasol_check_snmpv3_mem
        host_name               {NagiosHostname}
        _authpassword           {AuthPassword}
        _privpassword           {PrivPassword}
        _snmpuser               {User}
}}

define service{{
        use                     exasol_check_snmpv3_load
        host_name               {NagiosHostname}
        _authpassword           {AuthPassword}
        _privpassword           {PrivPassword}
        _snmpuser               {User}
}}

define service{{
        use                     exasol_check_snmpv3_storage
        host_name               {NagiosHostname}
        _authpassword           {AuthPassword}
        _privpassword           {PrivPassword}
        _snmpuser               {User}
}}
""".format(**snmpIps[ip])

configFilename = '/etc/nagios3/conf.d/exa_%s.cfg' % clusterName
f = open(configFilename, 'w')
f.write(configurationString)
f.close()

print("*** successfully created Nagios3 Configuration file '%s'" % configFilename)

proc = Popen(['/etc/init.d/nagios3', 'reload'], stdout=PIPE, stderr=STDOUT)
proc.wait()
